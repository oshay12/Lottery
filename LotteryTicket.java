import java.util.Random;
/**
 * @author Owen Shay 3750150
 CS1083
 Module 2 Assignment
 06/27/2022
 */

public class LotteryTicket {
    private static final int MAX_NUMBER = 50; // even though 49 is the max, the random number generator I coded is exclusive to the top bound, so 50 is pretty much 49 since it cannot be 50
    private static final int MIN_NUMBER = 1;
    public static final int NUMBER_QTY = 6;
    private int[] numbers = {0,0,0,0,0,0};
    private int ticketId;

    /**
     * public LotteryTicket(int ticketIdIn)
    Constructs a lottery ticket given a ticket id. The six numbers are generated by calling
    chooseRandomNumbers()

    @param:ticketIdIn - The given ticket id
     */
    public LotteryTicket(int ticketIdIn) {
        chooseRandomNumbers();
        do {
            chooseRandomNumbers();
        }while(duplicateNumber(0));
        ticketId = ticketIdIn;
    }

    /**
     * public int getTicketId()
     Accessor method for ticket id

     @return the ticketId
     */
    public int getTicketId() {return ticketId;}

    /**
     *public int[] getNumbers()
     Accessor method that returns a reference to the numbers array

     * @return A reference to the numbers array
     */
    public int[] getNumbers() {return numbers;}

    /**
     *public String toString()
     Returns a String to display the status of a lottery ticket

     * @return A String that displays the ticked id and the 6 numbers formatted
     */

    public String toString(){
        return getTicketId() + ":" + test.padLeft(String.valueOf(numbers[0]), 3) + test.padLeft(String.valueOf(numbers[1]), 3) + test.padLeft(String.valueOf(numbers[2]), 3) + test.padLeft(String.valueOf(numbers[3]), 3) + test.padLeft(String.valueOf(numbers[4]), 3) + test.padLeft(String.valueOf(numbers[5]), 3);
    }

    /**
     *private void chooseRandomNumbers()
     Generates six pseudo-random integers between 1 and 49 without duplicates, populating the numbers
     array with these integer values.
     */
    private void chooseRandomNumbers() {
        numbers = new int[NUMBER_QTY];
        Random num = new Random();
        for(int i = 0; i < NUMBER_QTY; i++){  // loops through the array, placing a random number in each index
            int result = num.nextInt(MAX_NUMBER-MIN_NUMBER) + MIN_NUMBER;  // makes the values in between the two bounds that were set
            numbers[i] = result;
        }
    }

    /**
     *public boolean duplicateNumber(int i)
     Uses the linear search algorithm to check if numbers[i] is a duplicate of numbers[j] for all values of j
     that are less than i (checks to see if the most recently generated number is a duplicate
     of the previously generated numbers.).

     * @param i - The index of the most recently generated number
     * @return true if a duplicate is found, false otherwise.
     */
    public boolean duplicateNumber(int i) {

        for(i = 0; i < NUMBER_QTY; i++) {  // O(n^2) time complexity
            for(int j = i + 1; j < NUMBER_QTY; j++) {
                if(numbers[i] == numbers[j]) {
                    return true;
                }
            }
        }
        return false;
    }

    /**
     * public int countWinningNumbers(int[] winningNumbers)
     Repeatedly uses the linear search algorithm to check each of this ticket's numbers against the winning
     numbers.

     * @param winningNumbers - An array of six integers representing the winning numbers for a lottery draw.
     * These will be six numbers between 1 and 49 without duplicates, in unsorted order.
     * @return The quantity of numbers on this ticket that match a winning number; this result will always be between
     * 0 and 6
     */
    public int countWinningNumbers(int[] winningNumbers) {
        int numbersMatched = 0;

        for(int i = 0; i < NUMBER_QTY; i++) {
            for (int j = 0; j < NUMBER_QTY; j++) {
                if (numbers[i] == winningNumbers[j]) {
                    numbersMatched++;
                }
            }
        }
        return numbersMatched;
    }
}
